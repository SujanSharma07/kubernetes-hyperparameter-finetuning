name: Model Training and Deployment Pipeline

on:
  push:
    branches:
      - master

env:
  K8S_CLUSTER_NAME: ${{ secrets.K8S_CLUSTER_NAME }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
  K8S_SERVER: ${{ secrets.K8S_SERVER }}
  DOCKER_TRAIN_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  COMPARISION_DOCKER_IMAGE: ${{ secrets.COMPARISION_DOCKER_IMAGE }}
  DEPLOYMENT_DOCKER_IMAGE: ${{ secrets.DEPLOYMENT_DOCKER_IMAGE }}
  DOCKER_USERNAME:  ${{ secrets.DOCKER_USERNAME }}
  GITHUB_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Build Docker images
        run: |
          docker build -f dockerfiles/Dockerfile-train -t ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_TRAIN_IMAGE }}:${{ github.sha }} .
          docker build -f dockerfiles/Dockerfile-best-model -t ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.COMPARISION_DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -f dockerfiles/Dockerfile-deploy -t ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.DEPLOYMENT_DOCKER_IMAGE }}:${{ github.sha }} .


      - name: Push Docker images
        run: |
          docker push ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_TRAIN_IMAGE }}:${{ github.sha }}
          docker push ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.COMPARISION_DOCKER_IMAGE }}:${{ github.sha }}
          docker push ghcr.io/${{ env.DOCKER_USERNAME }}/${{ env.DEPLOYMENT_DOCKER_IMAGE }}:${{ github.sha }}

  setup-k8s-context:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubernetes Context
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > $HOME/.kube/config

      - name: Validate Kubernetes Connection
        run: kubectl get nodes
        
  launch-jobs:
    runs-on: ubuntu-latest
    needs: setup-k8s-context
    steps:
      - name: Launch training jobs
        run: |
          set -e  # Exit on error
          kubectl apply -f k8s/persistent-volume.yaml
          kubectl apply -f k8s/persistent-volume-claim.yaml
          chmod +x ./scripts/launch_jobs.sh
          ./launch_jobs.sh

  select-model:
    runs-on: ubuntu-latest
    needs: launch-jobs
    steps:
      - name: Run model selection
        run: |
          envsubst < k8s/model-selection-job.yaml | kubectl apply -f -

      - name: Wait for model selection to complete
        run: kubectl wait --for=condition=complete job/model-selection-job

  deploy-model:
    runs-on: ubuntu-latest
    needs: select-model
    steps:
      - name: Deploy best model
        run: |
          envsubst < k8s/deployment.yaml | kubectl apply -f -

      - name: Apply Horizontal Pod Autoscaler
        run: |
          kubectl apply -f k8s/load-balancer-service.yaml
          kubectl apply -f k8s/hpa-config.yaml
 
      - name: Wait for deployment rollout
        run: kubectl rollout status deployment/model-deployment   # monitor the status of a Kubernetes deployment rollout to ensure that it successfully completes
